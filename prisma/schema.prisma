generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = "prisma://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiZmQ3YmYyNjMtMGVmOS00MTIwLTk5NzctNzIyMmVhZWQzM2I0IiwidGVuYW50X2lkIjoiNjJjY2VlMDA3ZGY4ZDgyNTQ1Yjg3Y2E2NDQ4NDE4ZTg4Mzc2YjFiOTYwZTI1Nzc2ODNlYTNjOGQwOTFjM2Y3NSIsImludGVybmFsX3NlY3JldCI6IjdlM2RiNDVlLTZjZmYtNDg5Yy05OGFhLWY1ODZmYTZkMTQyZCJ9.dLY1eWrTWLL_FNeDxQ5BFyGCFLa3eG2YXWXSAbJ-bEo"
  directUrl = env("SUPABASE_DIRECT_URL")
}

enum UserRole {
  STUDENT
  CLUBHEAD
  SACHEAD
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole?
  organisationId String?
  accounts       Account[]
  sessions       Session[]
  identityDocUrl String?
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Organisation Organisation?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Organisation {
  organisationId String @unique @default(cuid())
  createdBy      String @unique
  collegeName    String
  city           String
  state          String
  country        String
  image          String
  websiteUrl     String
  about          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [createdBy], references: [email], onDelete: NoAction)
}

enum ClubCategory {
  Technical
  Cultural
  Sports
}

model Clubs {
  organisationId    String       @unique
  createdBy         String       @unique
  name              String
  coordinatorName   String
  coCoordinatorName String
  category          ClubCategory

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
